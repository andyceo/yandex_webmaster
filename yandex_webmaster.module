<?php

/**
 * @file
 * The Yandex.Webmaster module main file.
 *
 * @author Andrey Andreev aka andyceo, <andyceo@yandex.ru>, http://andyceo.ruware.com/
 */

define('YANDEX_WEBMASTER_CLIENT_ID', '330203f400624560ad05db69a995a34f');
define('YANDEX_WEBMASTER_CLIENT_SECRET', '60ff216e90d74140901d78e6f33cb5b9');
define('YANDEX_WEBMASTER_OAUTH_LINK', 'https://oauth.yandex.ru/authorize?response_type=code&client_id=' . YANDEX_WEBMASTER_CLIENT_ID . '&display=iframe');
define('YANDEX_WEBMASTER_TOKEN_LINK', 'https://oauth.yandex.ru/token');
define('YANDEX_WEBMASTER_API_LINK', 'https://webmaster.yandex.ru/api');
define('YANDEX_WEBMASTER_TIMEOUT', 5);
define('YANDEX_WEBMASTER_CACHE_LIFETIME', 30 * 24 * 60 * 60);

/**
 * Implementation of hook_menu().
 */
function yandex_webmaster_menu() {
  $items = array();
  $items['admin/config/services/yandex_webmaster'] = array(
    'title' => 'Yandex.Webmaster',
    'description' => 'Get and save the Yandex.Webmaster confirmation code.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.admin.inc',
  );
  $items['admin/config/services/yandex_webmaster/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/services/yandex_webmaster/list'] = array(
    'title' => 'Host list',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_list_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.admin.inc',
    'weight' => 2,
  );
  $items['admin/config/services/yandex_webmaster/add'] = array(
    'title' => 'Add site',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_add_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.admin.inc',
    'weight' => 3,
  );


  //  Some hardcoded tabs for host stats, verify, excluded, indexed, links and tops.
  $items['admin/reports/yandex_webmaster'] = array(
    'title' => 'Yandex.Webmaster',
    'description' => 'Reports gathered from Yandex.Webmaster service.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'yandex_webmaster_stats_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.report.inc',
  );
  $items['admin/reports/yandex_webmaster/stats'] = array(
    'title' => 'Statistics',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 1,
  );
  $items['admin/reports/yandex_webmaster/indexed'] = array(
    'title' => 'Indexed pages',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_indexed_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 2,
  );
  $items['admin/reports/yandex_webmaster/excluded'] = array(
    'title' => 'Excluded pages',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_excluded_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 3,
  );
  $items['admin/reports/yandex_webmaster/tops'] = array(
    'title' => 'Top Search Queries',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_tops_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 4,
  );
  $items['admin/reports/yandex_webmaster/links'] = array(
    'title' => 'External links',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'yandex_webmaster_tops_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 5,
  );
  return $items;
}


////////API////////

function yandex_webmaster_authenthicate($auth_code) {
  $url = YANDEX_WEBMASTER_TOKEN_LINK;
  $options = array(
    'method' => 'POST',
    'timeout' => YANDEX_WEBMASTER_TIMEOUT,
    'data' => 'grant_type=authorization_code'
      . '&code=' . $auth_code
      . '&client_id=' . YANDEX_WEBMASTER_CLIENT_ID
      . '&client_secret=' . YANDEX_WEBMASTER_CLIENT_SECRET
  );
  $result = drupal_http_request($url, $options);

  // Check for timeout
  if ($result->code == HTTP_REQUEST_TIMEOUT) {
    drupal_set_message(t('Timeout during authentication. Can not retrieve token from Yandex.'), 'error');
    return FALSE;
  }

  if (!$result = drupal_json_decode($result->data)) {
    drupal_set_message(t('Authorization error: wrong response.'), 'error');
    return FALSE;
  }
  elseif (isset($result['error'])) {
    drupal_set_message(t('Authorization error: Yandex OAuth error (@error)', array('@error' => $result['error'])), 'error');
    return FALSE;
  }

  global $user;
  db_merge('yandex_webmaster')
  ->key(array('uid' => $user->uid))
  ->fields(array(
    'auth_code' => $auth_code,
    'token' => $result['access_token'],
    'created' => time(),
    'expired' => time() + $result['expires_in'],
    'cache' => '',
    'cached' => 0,
  ))
  ->execute();

  return $result['access_token'];
}

function yandex_webmaster_instance($reset = FALSE) {
  require_once('includes/yandex_webmaster.inc');
  $yw = &drupal_static(__FUNCTION__);
  if (!isset($yw) || $reset) {
    global $user;
    $cache = db_select('yandex_webmaster', 'yw')
      ->fields('yw')
      ->condition('uid', $user->uid)
      ->execute()
      ->fetchObject();
    if ($cache) {
      if (!empty($cache->cache) && ($cache->cached + YANDEX_WEBMASTER_CACHE_LIFETIME) > time()) {
        $cache->cache = unserialize($cache->cache);
        $yw = new DrupalYandexWebmaster($cache->token, YANDEX_WEBMASTER_API_LINK, $cache->cache);
        $yw->setTimeout(YANDEX_WEBMASTER_TIMEOUT);
      }
      else {
        $yw = new DrupalYandexWebmaster($cache->token, YANDEX_WEBMASTER_API_LINK);
        $yw->setTimeout(YANDEX_WEBMASTER_TIMEOUT);
        $cache = $yw->getServiceInfo();
        db_merge('yandex_webmaster')
          ->key(array('uid' => $user->uid))
          ->fields(array(
            'cache' => serialize($cache),
            'cached' => time(),
          ))
          ->execute();
      }
    }
    else {
      drupal_set_message(t('You did not set permissions for that module to grab information from Yandex.Webmaster. Please, go to the module <a href="!url">settings page</a> to allow that.', array('!url' => YANDEX_WEBMASTER_OAUTH_LINK)), 'error');
      $yw = NULL;
    }
  }
  return $yw;
}

function yandex_webmaster_user_host_list() {
  $yw = yandex_webmaster_instance();
  $cache = $yw->getServiceInfo();
  // @TODO: add current host if permission exists
  return $cache->host_list;
}

function yandex_webmaster_host_properties() {
  return array(
    'tcy' => t('TCY'),
    'index-count' => t('Pages in Yandex search index count'),
    'last-access' => t('Date and time of last Yandex bot visit'),
    'url-count' => t('Pages count, loaded by Yandex bot'),
    'url-errors' => t('Pages count, excluded from Yandex search index'),
    'links-count' => t('External links count'),
    'internal-links-count' => t('Internal links count'),
  );
}


/*
  private function logError() {
    $type = 'yandex_webmaster';
    $vars = array('@error' => var_export($this->error, TRUE));

    switch ($this->error['type']) {
      case 'timeout':
        watchdog($type, 'Timeout error. Error data:<br />@error', $vars, WATCHDOG_ERROR);
        if ($this->error_verbose) {
          drupal_set_message(t('Yandex.Webmaster timeout error.'), 'error');
        }
        break;
      case 'http':
        watchdog($type, 'HTTP error. Error data:<br />@error', $vars, WATCHDOG_ERROR);
        if ($this->error_verbose) {
          drupal_set_message(t('Yandex.Webmaster HTTP error.'), 'error');
        }
        break;
      case 'oauth':
        watchdog($type, 'OAuth error. Error data:<br />@error', $vars, WATCHDOG_ERROR);
        if ($this->error_verbose) {
          drupal_set_message(t('Yandex.Webmaster OAuth error.'), 'error');
        }
        break;
      case 'api':
        watchdog($type, 'API error. Error data:<br />@error', $vars, WATCHDOG_ERROR);
        if ($this->error_verbose) {
          drupal_set_message(t('Yandex.Webmaster API error.'), 'error');
        }
        break;
      default:
        watchdog($type, 'Unknown error. Error data:<br />@error', $vars, WATCHDOG_ERROR);
        if ($this->error_verbose) {
          drupal_set_message(t('Yandex.Webmaster unknown error.'), 'error');
        }
        break;
    }
  }
  */
